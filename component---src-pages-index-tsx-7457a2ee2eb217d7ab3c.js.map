{"version":3,"file":"component---src-pages-index-tsx-7457a2ee2eb217d7ab3c.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { PostFrontmatterType } from 'types/PostItem.types'\n\ntype PostItemProps = PostFrontmatterType & { link: string }\n\n\nconst PostItemWrapper = styled(Link)`\n  display: grid;\n  grid-template-columns: 3fr 1fr;\n  border-radius: 5px;\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.05);\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);\n  }\n`\nconst ThumbnailImage = styled(GatsbyImage)`\n  z-index: -1;\n  object-fit: cover;\n  // filter: brightness(0.25);\n  width: 100%;\n  border-radius: 0 5px 5px 0;\n  opacity: 0.6\n`\n\nconst PostItemContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n`\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-bottom: 3px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 16px;\n  font-weight: 700;\n`\n\nconst Date = styled.div`\n  font-size: 12px;\n  font-weight: 400;\n  opacity: 0.7;\n`\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 10px;\n  margin: 10px -5px;\n`\n\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 5px;\n  border-radius: 3px;\n  font-size: 12px;\n  font-weight: 700;\n  opacity: 0.7;\n`\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-top: 10px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 4;\n  -webkit-box-orient: vertical;\n  font-size: 13px;\n  font-weight: 400;\n  opacity: 0.7;\n`\n\nconst PostItem: FunctionComponent<PostItemProps> = function ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n  link,\n}) {\n  return (\n    <PostItemWrapper to={link}>\n\n\n      <PostItemContent>\n        <Title>{title}</Title>\n        <Date>{date}</Date>\n        <Category>\n          {categories.map(item => (\n            <CategoryItem key={item}>#{item}</CategoryItem>\n          ))}\n        </Category>\n        <Summary>{summary}</Summary>\n      </PostItemContent>\n\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n    </PostItemWrapper>\n  )\n}\n\nexport default PostItem","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react'\nimport { PostListItemType } from 'types/PostItem.types'\n\nexport type useInfiniteScrollType = {\n    containerRef: MutableRefObject<HTMLDivElement | null>\n    postList: PostListItemType[]\n}\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\n\nconst useInfiniteScroll = function (\n    selectedCategory: string,\n    posts: PostListItemType[],\n): useInfiniteScrollType {\n    const containerRef: MutableRefObject<HTMLDivElement | null> =\n        useRef<HTMLDivElement>(null)\n    const observer: MutableRefObject<IntersectionObserver | null> =\n        useRef<IntersectionObserver>(null)\n    const [count, setCount] = useState<number>(1)\n\n    const postListByCategory = useMemo<PostListItemType[]>(\n        () =>\n            posts.filter(\n                ({\n                    node: {\n                        frontmatter: { categories },\n                    },\n                }: PostListItemType) =>\n                    selectedCategory !== 'All'\n                        ? categories.includes(selectedCategory)\n                        : true,\n            ),\n        [selectedCategory],\n    )\n\n    useEffect(() => {\n        observer.current = new IntersectionObserver((entries, observer) => {\n            if (!entries[0].isIntersecting) return\n\n            setCount(value => value + 1)\n            observer.unobserve(entries[0].target)\n        })\n    }, [])\n\n    useEffect(() => setCount(1), [selectedCategory])\n\n    useEffect(() => {\n        if (\n            NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n            containerRef.current === null ||\n            containerRef.current.children.length === 0 ||\n            observer.current === null\n        )\n            return\n\n        observer.current.observe(\n            containerRef.current.children[containerRef.current.children.length - 1],\n        )\n    }, [count, selectedCategory])\n\n    return {\n        containerRef,\n        postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n    }\n}\n\nexport default useInfiniteScroll","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport PostItem from 'components/Main/PostItem'\nimport { PostListItemType } from 'types/PostItem.types'\nimport useInfiniteScroll, {\n    useInfiniteScrollType,\n} from 'hooks/useInfiniteScroll'\n\n\n// 기존에 정의했던 PostListItemType 삭제\n\ntype PostListProps = {\n    selectedCategory: string\n    posts: PostListItemType[]\n}\n\n\n\nexport type PostType = {\n    node: {\n        id: string\n        frontmatter: {\n            title: string\n            summary: string\n            date: string\n            categories: string[]\n            thumbnail: {\n                publicURL: string\n            }\n        }\n    }\n}\n\n\nconst PostListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 3em;\n  margin: 0 auto;\n  padding: 50px 0 100px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n  }\n`\n\nconst PostList: FunctionComponent<PostListProps> = function ({\n    selectedCategory,\n    posts,\n}) {\n    const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\n        selectedCategory,\n        posts,\n    )\n\n    return (\n        <PostListWrapper ref={containerRef}>\n            {postList.map(\n                ({\n                    node: {\n                        id,\n                        fields: { slug },\n                        frontmatter,\n                    },\n                }: PostListItemType) => (\n                    <PostItem {...frontmatter} link={slug} key={id} />\n                ),\n            )}\n        </PostListWrapper>\n    )\n}\n\nexport default PostList","import React, { FunctionComponent, useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport GlobalStyle from 'components/Common/GlobalStyle'\nimport Footer from 'components/Common/Footer'\nimport CategoryList from 'components/Main/CategoryList'\nimport Introduction from 'components/Main/Introduction'\nimport PostList, { PostType } from 'components/Main/PostList'\nimport { graphql } from 'gatsby'\nimport { PostListItemType } from 'types/PostItem.types'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport queryString, { ParsedQuery } from 'query-string'\nimport Template from 'components/Common/Template'\n\nconst Main = styled.div`\n  grid-column-start: 8;\n  grid-column-end: 18;\n  padding: 0 80px;\n  max-width: 800px;\n  min-width: 650px;\n  overflow: scroll;\n\n  @media (max-width: 1200px) {\n    // max-width: 800px;\n    // min-width: 100%;\n    margin: 0 auto;\n    padding: 0 80px;\n    overflow: visible;\n  }\n\n  @media (max-width: 768px) {\n    min-width: 100%;\n    padding: 0 8px;\n  }\n`\n\ntype IndexPageProps = {\n  location: {\n    search: string\n  }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemType[]\n    }\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n      publicURL: string\n    }\n  }\n}\n\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\n  location: { search },\n  data: {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  },\n}) {\n\n  const parsed: ParsedQuery<string> = queryString.parse(search)\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All'\n      : parsed.category\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostType,\n        ) => {\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n    >\n      <Introduction profileImage={gatsbyImageData} />\n      <Main>\n        <CategoryList\n          selectedCategory={selectedCategory}\n          categoryList={categoryList}\n        />\n        <PostList selectedCategory={selectedCategory} posts={edges} />\n      </Main>\n\n    </Template>\n  )\n}\nexport default IndexPage\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`;"],"names":["PostItemWrapper","_styled","Link","target","process","name","styles","ThumbnailImage","GatsbyImage","PostItemContent","Title","Date","Category","CategoryItem","Summary","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","___EmotionJSX","to","map","item","key","image","alt","selectedCategory","posts","containerRef","useRef","observer","useState","count","setCount","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","entries","isIntersecting","value","unobserve","length","children","observe","postList","slice","PostListWrapper","useInfiniteScroll","ref","id","slug","fields","PostItem","Main","search","location","data","site","siteMetadata","description","siteUrl","edges","allMarkdownRemark","file","publicURL","parsed","queryString","category","categoryList","reduce","list","forEach","undefined","All","Template","url","Introduction","profileImage","CategoryList","PostList"],"sourceRoot":""}