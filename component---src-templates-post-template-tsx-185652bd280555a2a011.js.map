{"version":3,"file":"component---src-templates-post-template-tsx-185652bd280555a2a011.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 200px;\n  padding: 60px 0;\n  // color: #ffffff;\n  padding: 0 20px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 20px 20px;\n  }\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 30px;\n  font-weight: 600;\n\n  @media (max-width: 768px) {\n    font-size: 24px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n  font-size: 14px;\n  font-weight: 500;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 12px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  const goBackPage = () => window.history.back();\n\n  return (\n    <PostHeadInfoWrapper>\n      <Title>{title}</Title>\n      <PostData>\n        <div>{categories.join(' / ')}</div>\n        <div>{date}</div>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\n\nconst PostHeadWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n  // height: 500px;\n  // margin-top: 80px;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  @media (max-width: 1200px) {\n    // grid-column-start: 8;\n    // grid-column-end: 18;\n    // max-width: 800px;\n    // min-width: 650px;\n    // margin: 0 auto;\n  }\n\n  @media (max-width: 768px) {\n    // height: 200px;\n    // margin-top: 12px;\n  }\n`\nconst PostHeadImg = styled.div`\n  width: 100%;  \n  padding: 20px 0;\n  object-fit: cover;\n  // box-sizing: border-box;\n  overflow: hidden;\n`\n\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} />\n))`\n  z-index: -1;\n  border-radius: 5px;\n  background-size: contain;\n  object-fit: contain;\n\n  @media (max-width: 768px) {\n\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <PostHeadWrapper>\n      <PostHeadImg>\n        <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      </PostHeadImg>\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  word-break: break-all;\n  box-sizing: border-box;\n\n  img {\n    display: block;\n    max-height: 500px;\n    width: auto;\n    margin: 0 auto;\n    padding: 0 20px;\n    object-fit: cover;\n  }\n\n  span + em, img + em {\n    display: block;\n    text-align: center;\n    font-size: 12px;\n  }\n\n\n\n  // Markdown Style\n  line-height: 1.5;\n  font-size: 14.2px;\n  font-weight: 400;\n  letter-spacing: -.01em;\n  color: #343a40 !important;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 14px 0;\n    color: #343a40 !important;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3,\n  h4 {\n    font-weight: 600;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3,\n  * + h3 {\n    margin-top: 60px;\n  }\n\n  h1 {\n    font-size: 20px;\n    font-weight: 700;\n  }\n\n  h2 {\n    font-size: 18px;\n    font-weight: 700;\n    \n  }\n\n  h3 {\n    font-size: 16px;\n    font-weight: 700;\n    \n  }\n\n  h4 {\n    font-size: 15px;\n    font-weight: 700;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 1px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 24px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 0.8px solid rgb(210, 210, 210);\n    background: rgb(210, 210, 210);\n    margin-bottom: 30px;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 14px;\n    font-weight: 500;\n    font-size: 12px;\n    font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace !important;\n    background: rgba(240, 240, 240, 0.5);\n    border-radius: 4px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(245, 255, 255, 0.5);\n      border-radius: 4px;\n    }\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 20px 20px;\n\n    font-size: 14px;\n\n    h1 {\n      font-size: 20px;\n    }\n\n    h2 {\n      font-weight: 700;\n      font-size: 18px;\n    }\n\n    h3 {\n      font-weight: 600;\n      font-size: 16px;\n    }\n\n    h4 {\n      font-weight: 600;\n      font-size: 14px;\n    }\n\n    img {\n      width: auto;\n      max-height: 300px;\n      padding: 0 10vw;\n      object-fit: cover;\n    }\n\n    hr {\n      margin-bottom: 30px;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'comtrial/comtrial.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n    src: string\n    repo: string\n    'issue-term': string\n    label: string\n    theme: string\n    crossorigin: string\n    async: string\n};\n\nconst UtterancesWrapper = styled.div`\n    padding: 120px 0;\n    \n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n    const element = createRef<HTMLDivElement>()\n\n    useEffect(() => {\n        if (element.current === null) return\n\n        const utterances: HTMLScriptElement = document.createElement('script')\n\n        const attributes: UtterancesAttributesType = {\n            src,\n            repo,\n            'issue-term': 'pathname',\n            label: 'Comment',\n            theme: `github-light`,\n            crossorigin: 'anonymous',\n            async: 'true',\n        }\n\n        Object.entries(attributes).forEach(([key, value]) => {\n            utterances.setAttribute(key, value)\n        })\n\n        element.current.appendChild(utterances)\n    }, [])\n\n    return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget","import React, { FunctionComponent, useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types' // 바로 아래에서 정의할 것입니다\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\nimport styled from '@emotion/styled'\nimport Introduction from 'components/Main/Introduction'\n\nimport CategoryList from 'components/Main/CategoryList'\nimport queryString, { ParsedQuery } from 'query-string'\n\nconst Post = styled.div`\n  grid-column-start: 7;\n  grid-column-end: 19;\n\n  margin: 0 auto;\n  min-width: 500px;\n  max-width: 580px;\n  width: 100%;\n\n  overflow: scroll;\n\n\n  @media (max-width: 1200px) {\n    margin: 0 auto;\n    padding: 0 40px;\n    overflow: visible;\n  }\n  \n\n  @media (max-width: 768px) {\n    min-width: 100%;\n    padding: 0;\n  }\n`\n\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n\n\n  const parsed: ParsedQuery<string> = queryString.parse(href)\n  const selectedCategory: string =\n    typeof parsed.category !== 'string' || !parsed.category\n      ? 'All'\n      : parsed.category\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (\n          list: CategoryListProps['categoryList'],\n          {\n            node: {\n              frontmatter: { categories },\n            },\n          }: PostType,\n        ) => {\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1;\n            else list[category]++;\n          });\n\n          list['All']++;\n\n          return list;\n        },\n        { All: 0 },\n      ),\n    [],\n  )\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n\n      <Introduction profileImage={gatsbyImageData} />\n      <Post>\n\n        <CategoryList\n          selectedCategory={selectedCategory}\n          categoryList={categoryList}\n        />\n        <PostHead\n          title={title}\n          date={date}\n          categories={categories}\n          thumbnail={gatsbyImageData}\n        />\n        <PostContent html={html} />\n        <CommentWidget />\n      </Post>\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"names":["PostHeadInfoWrapper","Title","PostData","title","date","categories","___EmotionJSX","join","PostHeadWrapper","PostHeadImg","BackgroundImage","_styled","props","GatsbyImage","process","thumbnail","image","alt","PostHeadInfo","MarkdownRenderer","target","name","styles","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","Post","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","gatsbyImageData","childImageSharp","publicURL","parsed","queryString","selectedCategory","category","categoryList","useMemo","reduce","list","undefined","All","Template","description","url","Introduction","profileImage","CategoryList","PostHead","PostContent","CommentWidget"],"sourceRoot":""}